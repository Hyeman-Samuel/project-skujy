

<style>
  .loader {
  border: 16px solid #f3f3f3; /* Light grey */
  border-top: 16px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>


<style>
  #drop-area {
  border: 2px dashed #ccc;
  border-radius: 20px;
  width: 480px;
  font-family: sans-serif;
  margin: auto;
  padding: 20px;
}
#drop-area.highlight {
  border-color: blue;
}
p {
  margin-top: 0;
}
.my-form {
  margin-bottom: 10px;
}
#gallery {
  margin-top: 10px;
}
#gallery img {
  width: 150px;
  margin-bottom: 10px;
  margin-right: 10px;
  vertical-align: middle;
}
.button {
  display: inline-block;
  padding: 10px;
  background: #ccc;
  cursor: pointer;
  border-radius: 5px;
  border: 1px solid #ccc;
}
.button:hover {
  background: #ddd;
}
#file {
  display: none;
}
</style>


<div class="row">
<a href="/course/{{CourseId}}"><button  type="button" class="btn btn-danger" aria-label="Left Align">
 <span class="glyphicon">&#xe257;</span> Back
</button>
</a>
 </div>
<hr>
  {{#if errors }}
      {{# each errors }}
        <p class="alert alert-danger" style="color: black;">{{ this.msg }}</p>
      {{/each}}
{{/if}}
<form class="form-horizontal" id="form" method="POST" action="/course/{{CourseId}}/addquestion">
  <div class="form-group">
    <label class="control-label col-sm-2" for="email">Question:</label>
    <div class="col-sm-10">
      <input type="text" class="form-control Title" name="Title" id="Title" placeholder="Enter Question">
    </div>
  </div>
  <div class="form-group">
    <label class="control-label col-sm-2" for="pwd">Options:</label>
    <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control optionTitle" name="Options[0][Title]" id="pwd" placeholder="Enter First Option">
   </div>
      <input type="checkbox" class=" option optionCheckboxes"  name="Options[0][IsCorrect]" value="true">
   </div>

    <input type="text" name="ImageUrl" id="ImageUrl" hidden="true" >
    <input type="text" name="ImagePublicId" id="public_id" hidden="true" >

   <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control optionTitle" name="Options[1][Title]" id="pwd" placeholder="Enter Second Option">
   </div>
      <input type="checkbox" class=" option optionCheckboxes"  name="Options[1][IsCorrect]" value="true">
   </div>

   <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control optionTitle" name="Options[2][Title]" id="pwd" placeholder="Enter Third Option">
   </div>
      <input type="checkbox" class=" option optionCheckboxes"  name="Options[2][IsCorrect]" value="true">
   </div>


    <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control optionTitle" name="Options[3][Title]" id="pwd" placeholder="Enter Fourth Option">
   </div>
      <input type="checkbox" class=" option optionCheckboxes" name="Options[3][IsCorrect]" value="true">
   </div>
  </div>



  <div class="col-sm-10">
  <label class="control-label col-sm-2" for="image">Add Image </label>
      <div class="col-sm-8">
                <div id="drop-area">
                  <div class="my-form">
                  <p>Upload multiple files with the file dialog or by dragging and dropping images onto the dashed region</p>
                  <input type="file" id="file" accept="image/*" onchange="handleFiles(this.files)">
                  <label class="button" for="file">Select an Image</label>
                  </div>
              </div>
      {{!-- <input type="file" id="file" class="form-con trol" placeholder="Add Image"> --}}
      </div>
   </div>
  
 


<div id="ImageCropper">
  <div class="row">
    <div class="col-sm-4 offset-sm-4" style="padding-top: 20px;" >
    <button type="button" id="crop" class="btn btn-success">Crop</button>
    <button type="button" id="reset" class="btn btn-primary">Reset</button>
    <button type="button" id="remove" class="btn btn-danger">Remove</button>
    </div>
  </div>
  <div class="row">
  <div class="col-sm-8 offset-sm-2" style="margin: auto;padding:10px">
    <img style=" display: block;max-width: 100%;" alt="DomoKun" id="target">
    <img style=" display: block;max-width: 100%;" alt="DomoKun" id="result">
  </div>
  </div>
</div>


  

  <div class="form-group" style="margin: 20px;">
    <div class="row"> 
      <div id="loader" class="offset-sm-1 col-sm-2">
     <div  class="loader"></div>
      <p id="loader-text">Uploading Image</p> 
    </div>
    <div class=" col-sm-3">
      <button type="submit" class="btn btn-large btn-primary">Create</button>
    </div>

  </div>
  </div>
</form>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
$(".option").change(function() {
    $(".option").prop('checked', false);
    $(this).prop('checked', true);
});

$(".option").change(function() {
    $(".option").not(this).prop('checked', false);
});
</script>
<script src="/lodash/lodash.js" type="text/javascript"></script>
<script src="/cloudinary-core/cloudinary-core.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.9/cropper.min.js" integrity="sha512-9pGiHYK23sqK5Zm0oF45sNBAX/JqbZEP7bSDHyt+nT3GddF+VFIcYNqREt0GDpmFVZI3LZ17Zu9nMMc9iktkCw==" crossorigin="anonymous"></script>
<script>
      let dropArea = document.getElementById('drop-area');
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false)
      })

      function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
      }

      function highlight(e) {
        dropArea.classList.add('highlight')
      }

      function unhighlight(e) {
        dropArea.classList.remove('highlight')
      }

      ;['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false)
      })

      ;['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false)
      })

      dropArea.addEventListener('drop', handleDrop, false)
   
      function handleDrop(e) {
        let dt = e.dataTransfer
        let files = dt.files
        handleFiles(files)
      } 

      function handleFiles(files) {
      ShowCropper(files[0])
      }


 
</script>

<script>
  const getBase64 = (file) => new Promise(function (resolve, reject) {
  let reader = new FileReader();
  reader.readAsDataURL(file);
  reader.onload = () => resolve(reader.result)
  reader.onerror = (error) => reject('Error: ', error);
}) 

</script>
  <script>

var cropper = new Cropper(document.getElementById('target'), {
    aspectRatio: 16 / 9
  });
  document.getElementById("ImageCropper").setAttribute("hidden","true")
            
  document.getElementById("file").onchange = async (e)=>{
        ShowCropper(e.target.files[0])
     }    
  </script>

  <script>
    var IsCropped; 
    var HasImage;
    var ImageInBase64; 
      function ShowResult(){
       document.getElementById("target").setAttribute("hidden","true")
       document.getElementById("result").removeAttribute("hidden")
     }
     function ShowTarget(){
      document.getElementById("result").setAttribute("hidden","true")
      document.getElementById("target").removeAttribute("hidden")
     }
     

     function ShowCropper(file){
        getBase64(file).then((result) => {            
            document.getElementById("ImageCropper").removeAttribute("hidden")            
            document.getElementById("target").setAttribute("src",result)
            ShowTarget()
            cropper.destroy()
            var img = document.getElementById('target')
            cropper = new Cropper(img, {
                  aspectRatio: 16 / 9
                });
            HasImage = true;

            /////Crop
            document.getElementById('crop').onclick =()=>{
            cropper.crop()
            cropper.getCroppedCanvas().toBlob((blob) => {
                getBase64(blob).then((result)=>{              
                document.getElementById("result").setAttribute("src",result)
                cropper.destroy()
                ShowResult()
                IsCropped = true;
                ImageInBase64 = result
                })
             })
             return
            }
        /////Remove
            document.getElementById('remove').onclick =()=>{
              cropper.destroy()
              document.getElementById("ImageCropper").setAttribute("hidden","true")
              document.getElementById("file").files[0] = null
              HasImage = false
              document.getElementById("loader").setAttribute("hidden","true")
              return
            }
        //////Reset
            document.getElementById('reset').onclick =()=>{
              cropper.destroy()
            var img = document.getElementById('target')
              cropper = new Cropper(img, {
                  aspectRatio: 16 / 9
                });
              ShowTarget()
              IsCropped = false
              ImageInBase64 = null
              return
            }
            })
          .catch(err => console.log(err)) 
     }
  </script>

<script>
document.getElementById("loader").setAttribute("hidden","true")
var cloudName = "indexter12"
function UploadFileAndSubmitForm(){
 if(!IsCropped && HasImage){
      alert("Image must be cropped")
      return
    }  
    
  var formData = new FormData() 
  if(ImageInBase64 != null){ 
     document.getElementById("loader").removeAttribute("hidden")
      formData.append("file", ImageInBase64);        
      formData.append("upload_preset", "ml_default");
      formData.append("unsigned", "true");

      fetch(`https://api.cloudinary.com/v1_1/${cloudName}/upload`, {
              method: 'POST',
              body: formData
              }).then(response => {
        if(response.ok){
             response.json().then((data)=>
            {
              document.getElementById("ImageUrl").value = data.url
              document.getElementById("public_id").value = data.public_id  
              document.getElementById("loader").setAttribute("hidden","true")
              document.getElementById("form").submit()                                                                                         
            })                                  
        }else{
            swal({
                    text: "Some thing went wrong! Maybe Internet?"
                  }); 
            document.getElementById("loader").setAttribute("hidden","true")                                                                                                                                       
        }
    })    
    }else{
      	document.getElementById("form").submit()
    } 
}
</script>  

<script>
   document.getElementById("form").onsubmit = async (e) => {   
    e.preventDefault();
  var message = ValidateQuestion()
   if (message != undefined){
    swal({
          text:message 
        });
     return
   }
    UploadFileAndSubmitForm()
  }
</script>

<script>
  function ValidateQuestion(){
    var title = document.getElementById("Title").value
    var optionTitles = document.getElementsByClassName("optionTitle")
    var optionCheckboxes = document.getElementsByClassName("optionCheckboxes")
    if(title == ""){
      return "Title is Required"   
    }
   //var titles = [optionTitles[0],optionTitles[1],optionTitles[2],optionTitles[3]]
   var titles = [...optionTitles]
   var validateOptionTitles = true 
     titles.forEach((input)=>{
       if(input.value == ""){
       validateOptionTitles = false     
       }
     })

     if(!validateOptionTitles){
       return "All options are required"
     }

    var checkboxes = [...optionCheckboxes]
    var correctOptions = 0
    checkboxes.forEach((input)=>{      
      if(input.checked){
        correctOptions++
      }
    })

    if(correctOptions == 0){
      return "No correct Options"
    }else if(correctOptions > 1){
      return "Multiple Options not allowed"
    }
  }
</script>