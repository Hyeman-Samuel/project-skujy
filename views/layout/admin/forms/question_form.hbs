
<div class="row">
<a href="/course/{{CourseId}}"><button  type="button" class="btn btn-danger" aria-label="Left Align">
 <span class="glyphicon">&#xe257;</span> Back
</button>
</a>
 </div>
<hr>
<form class="form-horizontal" id="form" method="POST" action="/course/{{CourseId}}/addquestion">
  <div class="form-group">
    <label class="control-label col-sm-2" for="email">Question:</label>
    <div class="col-sm-10">
      <input type="text" class="form-control" name="Title" id="email" placeholder="Enter Question">
    </div>
  </div>
  <div class="form-group">
    <label class="control-label col-sm-2" for="pwd">Options:</label>
    <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control" name="Options[0][Title]" id="pwd" placeholder="Enter First Option">
   </div>
      <input type="checkbox" class=" option"  name="Options[0][IsCorrect]" value="true">
   </div>

    <input type="text" name="ImageUrl" id="ImageUrl" hidden="true" >

   <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control" name="Options[1][Title]" id="pwd" placeholder="Enter Second Option">
   </div>
      <input type="checkbox" class=" option"  name="Options[1][IsCorrect]" value="true">
   </div>

   <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control" name="Options[2][Title]" id="pwd" placeholder="Enter Third Option">
   </div>
      <input type="checkbox" class=" option"  name="Options[2][IsCorrect]" value="true">
   </div>


    <div class="col-sm-10">
    <div class="col-sm-8">
      <input type="text" class="form-control" name="Options[3][Title]" id="pwd" placeholder="Enter Fourth Option">
   </div>
      <input type="checkbox" class=" option" name="Options[3][IsCorrect]" value="true">
   </div>
  </div>



  <div class="col-sm-10">
  <label class="control-label col-sm-2" for="image">Add Image </label>
  <div class="col-sm-8">
    <input type="file" id="file" class="form-control" placeholder="Add Image">
  </div>
   </div>
  </div>

<div id="ImageCropper">
  <div class="row">
    <div class="col-sm-4 offset-sm-4" style="padding-top: 20px;" >
    <button id="crop" class="btn btn-success">Crop</button>
    <button id="reset" class="btn btn-primary">Reset</button>
    <button id="remove" class="btn btn-danger">Remove</button>
    </div>
  </div>
  <div class="row">
  <div class="col-sm-8 offset-sm-2" style="margin: auto;padding:10px">
    <img style=" display: block;max-width: 100%;" alt="DomoKun" id="target">
    <img style=" display: block;max-width: 100%;" alt="DomoKun" id="result">
  </div>
  </div>
</div>

  

  <div class="form-group">
    <div class="offset-sm-1 col-sm-10">
      <button type="submit" class="btn btn-large btn-primary">Create</button>
    </div>
  </div>
</form>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
$(".option").change(function() {
    $(".option").prop('checked', false);
    $(this).prop('checked', true);
});

$(".option").change(function() {
    $(".option").not(this).prop('checked', false);
});
</script>
<script src="/lodash/lodash.js" type="text/javascript"></script>
<script src="/cloudinary-core/cloudinary-core.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.9/cropper.min.js" integrity="sha512-9pGiHYK23sqK5Zm0oF45sNBAX/JqbZEP7bSDHyt+nT3GddF+VFIcYNqREt0GDpmFVZI3LZ17Zu9nMMc9iktkCw==" crossorigin="anonymous"></script>
<script>
  const getBase64 = (file) => new Promise(function (resolve, reject) {
  let reader = new FileReader();
  reader.readAsDataURL(file);
  reader.onload = () => resolve(reader.result)
  reader.onerror = (error) => reject('Error: ', error);
}) 
</script>
  <script>
var cropper = new Cropper(document.getElementById('target'), {
    aspectRatio: 16 / 9
  });
  document.getElementById("ImageCropper").setAttribute("hidden","true")
var IsCropped; 
var HasImage;
var ImageInBase64;             

     var file = document.getElementById("file").onchange = async (e)=>{
            getBase64(e.target.files[0]).then((result) => {            
            document.getElementById("ImageCropper").removeAttribute("hidden")            
            document.getElementById("target").setAttribute("src",result)
            ShowTarget()
            cropper.destroy()
            var img = document.getElementById('target')
              cropper = new Cropper(img, {
                  aspectRatio: 16 / 9
                });
                HasImage = true;

            /////Crop
            document.getElementById('crop').onclick =()=>{
              cropper.crop()
             cropper.getCroppedCanvas().toBlob((blob) => {
                getBase64(blob).then((result)=>{              
                document.getElementById("result").setAttribute("src",result)
                cropper.destroy()
                ShowResult()
                IsCropped = true;
                ImageInBase64 = result
                })
             })
            }
        /////Remove
            document.getElementById('remove').onclick =()=>{
              cropper.destroy()
              document.getElementById("ImageCropper").setAttribute("hidden","true")
              document.getElementById("file").files[0] = null
              HasImage = false
            }
        //////Reset
            document.getElementById('reset').onclick =()=>{
              cropper.destroy()
               var img = document.getElementById('target')
              cropper = new Cropper(img, {
                  aspectRatio: 16 / 9
                });
              ShowTarget()
              IsCropped = false
              ImageInBase64 = null
            }})
          .catch(err => console.log(err))            
     }

     function ShowResult(){
       document.getElementById("target").setAttribute("hidden","true")
       document.getElementById("result").removeAttribute("hidden")
     }
     function ShowTarget(){
      document.getElementById("result").setAttribute("hidden","true")
      document.getElementById("target").removeAttribute("hidden")
     }
     
  </script>

<script>

var cloudName = "indexter12"
function UploadFile(){
 var file = document.getElementById("file").files[0] 
 if(!IsCropped && HasImage){
      alert("Image must be cropped")
      return
    }  
    
  var formData = new FormData() 
  if(ImageInBase64 != null){ 
    
      formData.append("file", ImageInBase64);        
      formData.append("upload_preset", "ml_default");
      formData.append("unsigned", "true");

      fetch(`https://api.cloudinary.com/v1_1/${cloudName}/upload`, {
              method: 'POST',
              body: formData
              }).then(response => {
        if(response.ok){
             response.json().then((data)=>
            {
              document.getElementById("ImageUrl").value = data.url  
              document.getElementById("form").submit()                                                                                         
            })                                  
        }else{
              response.json().then((data)=>
            {
              swal({
                    text: "Some thing went wrong! Maybe Internet?"
                  });                                                                                                
            })                                           
        }
    })    
    }else{
      	document.getElementById("form").submit()
    } 
}


 document.getElementById("form").onsubmit = async (e) => {
    e.preventDefault();
    UploadFile()
  }
</script>   

